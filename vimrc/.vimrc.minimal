"---------------------------------------------------------------------------------
" Author      : Younghun Jeong (younghoon.j@navercorp.com)
" Date        : 2023/12/05
" Description :
"       - 기본 .vimrc
"       - /etc/vimrc는 무조건 먼저 적용된다.
"       - 참고
"           ; younghoon's vim setting : https://github.com/boychaboy/dotfiles/blob/main/.vimrc
"---------------------------------------------------------------------------------
let mapleader = ","
set mouse=a
set ignorecase

" encoding
set encoding=utf8
scriptencoding utf-8
set fileencoding=utf8
set nocompatible

"=====================================================
"" Vundle plugins 
"=====================================================
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

    Plugin 'VundleVim/Vundle.vim'               " let Vundle manage Vundle, required
    Plugin 'preservim/nerdcommenter'            " Fast commenter: <leader>c<space>
    Plugin 'scrooloose/nerdtree'                " Project and file navigation
    Plugin 'tomasiser/vim-code-dark'            " VSCode Color Scheme
    Plugin 'klen/python-mode'                   " Python mode (docs, refactor, lints...)


call vundle#end()                           " required

"=====================================================
"" Color scheme
"=====================================================
set t_Co=256                                " set 256 colors
colorscheme codedark                        " set color scheme
let g:codedark_transparent=1

"=====================================================
"" NERDTree settings
"=====================================================
let NERDTreeIgnore=['\.pyc$', '\.pyo$', '__pycache__$']     " Ignore files in NERDTree
let NERDTreeWinSize=30
autocmd VimEnter * if !argc() | NERDTree | endif  " Load NERDTree only if vim is run without arguments
nmap \ :NERDTreeToggle<CR>

"=====================================================
"" Nerdcommenter settings
"=====================================================
" Create default mappings
let g:NERDCreateDefaultMappings = 1

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting aregion)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not 
let g:NERDToggleCheckAllLines = 1

"=====================================================
"" Pymode settings
"=====================================================

" python executables for different plugins
let g:pymode = 1
let g:pymode_python='python3'
" syntax highlight
let g:pymode_syntax=1
let g:pymode_syntax_slow_sync=1
let g:pymode_syntax_all=1
let g:pymode_syntax_print_as_function=g:pymode_syntax_all
let g:pymode_syntax_highlight_async_await=g:pymode_syntax_all
let g:pymode_syntax_highlight_equal_operator=g:pymode_syntax_all
let g:pymode_syntax_highlight_stars_operator=g:pymode_syntax_all
let g:pymode_syntax_highlight_self=g:pymode_syntax_all
let g:pymode_syntax_indent_errors=g:pymode_syntax_all
let g:pymode_syntax_string_formatting=g:pymode_syntax_all
let g:pymode_syntax_space_errors=g:pymode_syntax_all
let g:pymode_syntax_string_format=g:pymode_syntax_all
let g:pymode_syntax_string_templates=g:pymode_syntax_all
let g:pymode_syntax_doctests=g:pymode_syntax_all
let g:pymode_syntax_builtin_objs=g:pymode_syntax_all
let g:pymode_syntax_builtin_types=g:pymode_syntax_all
let g:pymode_syntax_highlight_exceptions=g:pymode_syntax_all
let g:pymode_syntax_docstrings=g:pymode_syntax_all

let g:pymode_options_max_line_length = 120
let g:pymode_options_colorcolumn = 1
hi ColorColumn ctermbg=0

" breakpoints
let g:pymode_breakpoint=1
let g:pymode_breakpoint_key='<leader>b'
let g:pymode_breakpoint_cmd = 'import ipdb; ipdb.set_trace(context=10)  # fmt: skip'


"=====================================================
"" Syntax & highlight
"=====================================================
syntax on
syntax enable                               " syntax highlight
set cursorline                              " shows line under the cursor's line

" tab size
set ts=4
" set noexpandtab -> set expandtab
set expandtab
set shiftwidth=4

" indent
filetype indent on
filetype on

" line number
set number

" python
set paste
set textwidth=0
set tabstop=4
set softtabstop=4
set shiftwidth=4
set autoindent 
set backspace=indent,eol,start 
set incsearch 
set wildmenu 
set commentstring=\ #\ %s 

autocmd BufRead *.txt set textwidth=0

" history of ":"
set history=100

" When editing a file, always jump to the last cursor position
autocmd BufReadPost *
\ if line("'\"") > 0 && line ("'\"") <= line("$") |
\ exe "normal! g'\"" |
\ endif

" search
set hlsearch
set incsearch " do incremental searching

hi TabLineFill ctermfg=Cyan
hi TabLineSel ctermbg=Blue
hi TabLine ctermbg=Gray
hi StatusLine ctermfg=white ctermbg=blue cterm=bold
hi VertSplit ctermbg=magenta
" 밑줄
augroup BgHighlight
    autocmd!
    autocmd WinEnter * set cul
    autocmd WinLeave * set nocul
augroup END

set showmatch
filetype on
filetype indent on
filetype plugin on
set ls=2

"=====================================================
"" General settings
"=====================================================
set scrolloff=10                            " let 10 lines before/after cursor during scroll
set clipboard=unnamed                       " use system clipboard

"=====================================================
"" Key Mappings
"=====================================================
nmap <F2> :cs f c <C-R>=expand("<cword>") <CR><CR>

" Additional mappings for Esc (useful for MacBook with touch bar)
inoremap jj <Esc>
inoremap jk <Esc>

" save
nmap <leader>s :w<CR>
nmap <leader>q :q!<CR>
map <leader>w :bp<bar>sp<bar>bn<bar>bd<CR>

